# -*- mode: ruby -*-
# vi: set ft=ruby :

# see http://blog.glidenote.com/blog/2014/02/26/vagrant-dotenv/
if Vagrant.has_plugin?("dotenv")
  Dotenv.load
end

HOSTNAME = "vagrant-sample"
FQDN = "vagrant-sample.local"
IP_ADDRESS = ENV["VAGRANT_IP_ADDRESS"] ? ENV["VAGRANT_IP_ADDRESS"] : "192.168.10.10"

# 0: MySQLを使用しない
# 1: MySQLを使用する
USE_MYSQL = 1

# 0: PostgreSQLを使用しない
# 1: PostgreSQLを使用する
USE_POSTGRES = 1

# 0: CakePHPをprovisionしない
# 2: CakePHP2系をprovisionする
# 3: CakePHP3系をprovisionする
CAKEPHP = 0

# DB設定
DB_USER = "vagrant"
DB_PASS = ""
DB_NAME = "vagrant_sample_develop"
TEST_DB_NAME = "vagrant_sample_test"

# インストールするPHPのバージョン
# 53, 54, 55, 56, 70
PHP_VERSION = "70"

# synced_folder設定
SOURCE = "../src"
TARGET = "/srv/httpd/"



# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "oppara/CentOS-6.7-dev"

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  if Vagrant.has_plugin?("vagrant-hostsupdater")
    config.hostsupdater.aliases = [
      FQDN
    ]
  end

  config.vm.synced_folder SOURCE, TARGET, \
        create: true, owner: 'vagrant', group: 'vagrant', \
        mount_options: ['dmode=777,fmode=776']

  if defined? IP_ADDRESS
    config.vm.network :private_network, ip: IP_ADDRESS
  end

  if defined? HOSTNAME
    config.vm.hostname = HOSTNAME
  end

  config.vm.provider :virtualbox do |vb|
    if defined? HOSTNAME
      vb.name = HOSTNAME
    end
    # vb.gui = true
    # vb.memory = "2048"
  end

  if USE_MYSQL == 1 then
    config.vm.provision "shell" do |s|
      s.name = "setup mysql database and user"
      s.env = {:DB_NAME => DB_NAME, :TEST_DB_NAME => TEST_DB_NAME, :DB_USER => DB_USER, :DB_PASS => DB_PASS}
      s.path = "scripts/mysql.sh"
    end
  end

  if USE_POSTGRES == 1 then
    config.vm.provision "shell" do |s|
      s.name = "setup postgresql database and user"
      s.env = {:DB_NAME => DB_NAME, :TEST_DB_NAME => TEST_DB_NAME, :DB_USER => DB_USER, :DB_PASS => DB_PASS}
      s.path = "scripts/psql.sh"
    end
  end

  config.vm.provision :shell, :inline => <<-SHELL
    /sbin/service httpd stop
    /sbin/service postgresql-9.5 stop
    /sbin/service mysqld stop
  SHELL

  config.vm.provision "shell" do |s|
    s.name = "setup PHP#{PHP_VERSION}"
    s.env = {:VERSION => PHP_VERSION}
    s.path = "scripts/php.sh"
  end

  config.vm.provision "shell" do |s|
    s.name = "setup composer"
    s.path = "scripts/php_composer.sh"
  end

  if CAKEPHP > 1 then
    config.vm.provision "shell" do |s|
      s.name = "setup CakePHP#{CAKEPHP}"
      s.env = {
        :DB_NAME => DB_NAME,
        :TEST_DB_NAME => TEST_DB_NAME,
        :DB_USER => DB_USER,
        :DB_PASS => DB_PASS,
        :USE_POSTGRES => USE_POSTGRES,
        :USE_MYSQL => USE_MYSQL,
      }
      s.path = "scripts/cakephp#{CAKEPHP}.sh"
    end
  end

  config.vm.provision :shell, :inline => <<-EOT
    if [[ #{USE_POSTGRES} == 1 ]]; then
      /sbin/service postgresql-9.5 start
    fi

    if [[ #{USE_MYSQL} == 1 ]]; then
      /sbin/service mysqld start
    fi

    cp -f /vagrant/etc/dev.conf /etc/httpd/conf.d/
    cp -f /vagrant/etc/httpd-php.conf /etc/httpd/conf.d/

    conf=/etc/httpd/conf.d/dev.conf
    if [[ #{CAKEPHP} == 0 ]]; then
      mkdir /srv/httpd/htdocs
      echo "<?php\nphpinfo();" > /srv/httpd/htdocs/index.php
    fi
    if [[ #{CAKEPHP} == 2 ]]; then
      sed -i -e 's@DocumentRoot "/srv/httpd/htdocs"@DocumentRoot "/srv/httpd/app/webroot"@g' ${conf}
      sed -i -e 's@<Directory "/srv/httpd/htdocs">@<Directory "/srv/httpd/app/webroot">@g' ${conf}
    fi
    if [[ #{CAKEPHP} == 3 ]]; then
      sed -i -e 's@DocumentRoot "/srv/httpd/htdocs"@DocumentRoot "/srv/httpd/webroot"@g' ${conf}
      sed -i -e 's@<Directory "/srv/httpd/htdocs">@<Directory "/srv/httpd/webroot">@g' ${conf}
    fi

    if [[ -n #{FQDN} ]]; then
      sed -i -e "s@#ServerName DUMMY@ServerName #{FQDN}@" ${conf}
    fi

    /sbin/service httpd start
  EOT

  # config.vm.provision :shell, :inline => <<-SHELL
    # #
    # # migration
    # #
    # export PATH="/usr/local/bin:${PATH}"
    # git checkout -b develop origin/develop
    # cd /srv/httpd/app
    # export CAKE_ENV=development; bash ./Console/cake Migrations.migration run all
  # SHELL
end
