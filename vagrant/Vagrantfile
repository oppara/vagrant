# -*- mode: ruby -*-
# vi: set ft=ruby :

Dotenv.load

HOSTNAME = "foo"
DB_NAME = "foo"
IP_ADDRESS = ENV["VAGRANT_IP_ADDRESS"] ? ENV["VAGRANT_IP_ADDRESS"] : "192.168.33.30"

SOURCE = "../src"
TARGET = "/srv/httpd/"

# 53, 54, 55, 56
PHP_VERSION = "55"
PHP_PACKAGES = %w(
  php
  php-devel
  php-common
  php-cli
  php-pear
  php-gd
  php-xml
  php-mbstring
  php-mcrypt
  php-pdo
  php-pgsql
  php-imap
  php-pecl-xdebug
)


# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "CentOS-6.6-dev"
  config.vm.box_url = "https://github.com/oppara/packer-templates/releases/download/CentOS-6.6-dev/CentOS-6.6-dev-virtualbox.box"

  if Vagrant.has_plugin?("vagrant-cachier")
    config.cache.scope = :box
  end

  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = false
  end

  if HOSTNAME != ""
    config.vm.hostname = HOSTNAME
  end

  config.vm.network :private_network, ip: IP_ADDRESS

  config.vm.synced_folder SOURCE, TARGET, \
        create: true, owner: 'vagrant', group: 'vagrant', \
        mount_options: ['dmode=777,fmode=666']

  config.vm.provider :virtualbox do |vb|
    if HOSTNAME != ""
      vb.name = HOSTNAME
    end
    # vb.gui = true
  end

  case PHP_VERSION
  when "55", "56" then
    version = PHP_VERSION + "u"
    PHP_PACKAGES << "php-mysqlnd" << "php-opcache"
  when "54" then
    version = PHP_VERSION
    PHP_PACKAGES << "php-mysqlnd" << "php-pecl-apc"
  else
    version = ""
    PHP_PACKAGES << "php-mysql" << "php-pecl-apc"
  end

  package_list = PHP_PACKAGES.map do |item|
    item.gsub(/php/, 'php' + version)
  end
  packages = package_list.join(" ")

  config.vm.provision :shell, :inline => <<-EOT
    /sbin/service httpd stop
    /sbin/service postgresql-9.3 stop

    #
    # yum repository
    #
    rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-6
    rpm -ivh https://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm

    rpm --import http://dl.iuscommunity.org/pub/ius/IUS-COMMUNITY-GPG-KEY
    rpm -ivh http://dl.iuscommunity.org/pub/ius/stable/CentOS/6/x86_64/ius-release-1.0-14.ius.centos6.noarch.rpm

    rpm --import http://rpms.famillecollet.com/RPM-GPG-KEY-remi
    rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm

    yum -y install libmcrypt-devel

    #
    # httpd
    #
    ln -s /vagrant/etc/dev.conf /etc/httpd/conf.d/.

    # #
    # # mysql
    # #
    # yum -y install yum-plugin-replace
    # yum -y install mysql
    # yum -y replace mysql --replace-with mysql56u
    # yum -y --enablerepo=ius install mysql56u-server mysql56u-devel
    # cp -f /vagrant/etc/my.cnf /etc/my.cnf
    # chkconfig mysqld on
    # /sbin/service mysqld start
    # mysql -u root -e "create database #{DB_NAME}";
    # mysql -u root -e "create database #{DB_NAME}_test";
    # mysql -u root -e "grant all privileges on *.* to vagrant@'%' identified by 'vagrant'";
    # mysql -u root -e "grant all privileges on *.* to vagrant@'localhost' identified by 'vagrant'";
    # mysql -u root -e "grant all privileges on *.* to vagrant@'127.0.0.1' identified by 'vagrant'";


    #
    # php
    #
    yum -y install #{packages}
    touch /var/log/php_error.log && chmod 666 /var/log/php_error.log
    cp -f /vagrant/etc/php.ini#{PHP_VERSION} /etc/php.ini

    #
    # composer
    #
    curl -sS https://getcomposer.org/installer | php
    chmod +x composer.phar
    mv composer.phar /usr/bin/composer

    /sbin/service postgresql-9.3 start
    /sbin/service httpd start

    # #
    # # phing, phpcs
    # #
    # pear channel-update pear.php.net
    # pear upgrade PEAR
    # pear config-set auto_discover 1
    # pear install PHP_CodeSniffer
    # pear install pear.phing.info/phing

    # #
    # # phpunit
    # #
    # sudo -u vagrant composer global require phpunit/phpunit:3.7.*

    # #
    # # postgresql
    # #
    # /usr/bin/createuser -d -A -S -U postgres vagrant
    # /usr/bin/createdb -Uvagrant -E UTF-8 -T template0 -O vagrant #{DB_NAME}
    # /usr/bin/createdb -Uvagrant -E UTF-8 -T template0 -O vagrant #{DB_NAME}_test

    # # Migration
    # cd /path/to/cake/app
    # export CAKE_ENV=vagrant; sh ./Console/cake Migrations.migration run all
  EOT
end
